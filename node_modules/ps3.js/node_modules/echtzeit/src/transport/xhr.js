echtzeit.Transport.XHR = echtzeit.extend(echtzeit.Class(echtzeit.Transport, {
	encode: function(messages) {
		return echtzeit.toJSON(messages);
	},

	request: function(messages) {
		var href = this.endpoint.href,
				xhr  = echtzeit.ENV.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : new XMLHttpRequest(),
				self = this;

		xhr.open('POST', href, true);
		xhr.setRequestHeader('Content-Type', 'application/json');
		xhr.setRequestHeader('Pragma', 'no-cache');
		xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

		var headers = this._dispatcher.headers;
		for (var key in headers) {
			if (!headers.hasOwnProperty(key)) continue;
			xhr.setRequestHeader(key, headers[key]);
		}

		var abort = function() { xhr.abort() };
		if (echtzeit.ENV.onbeforeunload !== undefined) echtzeit.Event.on(echtzeit.ENV, 'beforeunload', abort);

		xhr.onreadystatechange = function() {
			if (!xhr || xhr.readyState !== 4) return;

			var replies    = null,
					status     = xhr.status,
					text       = xhr.responseText,
					successful = (status >= 200 && status < 300) || status === 304 || status === 1223;

			if (echtzeit.ENV.onbeforeunload !== undefined) echtzeit.Event.detach(echtzeit.ENV, 'beforeunload', abort);
			xhr.onreadystatechange = function() {};
			xhr = null;

			if (!successful) return self._handleError(messages);

			try {
				replies = JSON.parse(text);
			} catch (e) {}

			if (replies)
				self._receive(replies);
			else
				self._handleError(messages);
		};

		xhr.send(this.encode(messages));
		return xhr;
	}
}), {
	isUsable: function(dispatcher, endpoint, callback, context) {
		callback.call(context, echtzeit.URI.isSameOrigin(endpoint));
	}
});

echtzeit.Transport.register('long-polling', echtzeit.Transport.XHR);
