echtzeit.Transport.CORS = echtzeit.extend(echtzeit.Class(echtzeit.Transport, {
	encode: function(messages) {
		return 'message=' + encodeURIComponent(echtzeit.toJSON(messages));
	},

	request: function(messages) {
		var xhrClass = echtzeit.ENV.XDomainRequest ? XDomainRequest : XMLHttpRequest,
				xhr      = new xhrClass(),
				headers  = this._dispatcher.headers,
				self     = this,
				key;

		xhr.open('POST', echtzeit.URI.stringify(this.endpoint), true);

		if (xhr.setRequestHeader) {
			xhr.setRequestHeader('Pragma', 'no-cache');
			for (key in headers) {
				if (!headers.hasOwnProperty(key)) continue;
				xhr.setRequestHeader(key, headers[key]);
			}
		}

		var cleanUp = function() {
			if (!xhr) return false;
			xhr.onload = xhr.onerror = xhr.ontimeout = xhr.onprogress = null;
			xhr = null;
		};

		xhr.onload = function() {
			var replies = null;
			try {
				replies = JSON.parse(xhr.responseText);
			} catch (e) {}

			cleanUp();

			if (replies)
				self._receive(replies);
			else
				self._handleError(messages);
		};

		xhr.onerror = xhr.ontimeout = function() {
			cleanUp();
			self._handleError(messages);
		};

		xhr.onprogress = function() {};
		xhr.send(this.encode(messages));
		return xhr;
	}
}), {
	isUsable: function(dispatcher, endpoint, callback, context) {
		if (echtzeit.URI.isSameOrigin(endpoint))
			return callback.call(context, false);

		if (echtzeit.ENV.XDomainRequest)
			return callback.call(context, endpoint.protocol === echtzeit.ENV.location.protocol);

		if (echtzeit.ENV.XMLHttpRequest) {
			var xhr = new echtzeit.ENV.XMLHttpRequest();
			return callback.call(context, xhr.withCredentials !== undefined);
		}
		return callback.call(context, false);
	}
});

echtzeit.Transport.register('cross-origin-long-polling', echtzeit.Transport.CORS);
