echtzeit.Transport.EventSource = echtzeit.extend(echtzeit.Class(echtzeit.Transport, {
	initialize: function(dispatcher, endpoint) {
		echtzeit.Transport.prototype.initialize.call(this, dispatcher, endpoint);
		if (!echtzeit.ENV.EventSource) return this.setDeferredStatus('failed');

		this._xhr = new echtzeit.Transport.XHR(dispatcher, endpoint);

		endpoint = echtzeit.copyObject(endpoint);
		endpoint.pathname += '/' + dispatcher.clientId;

		var socket = new EventSource(echtzeit.URI.stringify(endpoint)),
				self   = this;

		socket.onopen = function() {
			self._everConnected = true;
			self.setDeferredStatus('succeeded');
		};

		socket.onerror = function() {
			if (self._everConnected) {
				self._handleError([]);
			} else {
				self.setDeferredStatus('failed');
				socket.close();
			}
		};

		socket.onmessage = function(event) {
			self._receive(JSON.parse(event.data));
		};

		this._socket = socket;
	},

	close: function() {
		if (!this._socket) return;
		this._socket.onopen = this._socket.onerror = this._socket.onmessage = null;
		this._socket.close();
		delete this._socket;
	},

	isUsable: function(callback, context) {
		this.callback(function() { callback.call(context, true) });
		this.errback(function() { callback.call(context, false) });
	},

	encode: function(messages) {
		return this._xhr.encode(messages);
	},

	request: function(messages) {
		return this._xhr.request(messages);
	}

}), {
	isUsable: function(dispatcher, endpoint, callback, context) {
		var id = dispatcher.clientId;
		if (!id) return callback.call(context, false);

		echtzeit.Transport.XHR.isUsable(dispatcher, endpoint, function(usable) {
			if (!usable) return callback.call(context, false);
			this.create(dispatcher, endpoint).isUsable(callback, context);
		}, this);
	},

	create: function(dispatcher, endpoint) {
		var sockets = dispatcher.transports.eventsource = dispatcher.transports.eventsource || {},
				id      = dispatcher.clientId;

		endpoint = echtzeit.copyObject(endpoint);
		endpoint.pathname += '/' + (id || '');
		var url = echtzeit.URI.stringify(endpoint);

		sockets[url] = sockets[url] || new this(dispatcher, endpoint);
		return sockets[url];
	}
});

echtzeit.extend(echtzeit.Transport.EventSource.prototype, echtzeit.Deferrable);
echtzeit.Transport.register('eventsource', echtzeit.Transport.EventSource);
